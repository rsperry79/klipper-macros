#####################################################################
# Validate
#####################################################################

[gcode_macro _check_kinematic_limits]
gcode:
  {% set toolhead = printer.toolhead %}
  {% if params.X and (params.X|float < toolhead.axis_minimum.x or
                      params.X|float > toolhead.axis_maximum.x) %}
    {action_raise_error("X[%.3f] must be between %.3f and %.3f."
                        | format(params.X|float, toolhead.axis_minimum.x,
                                 toolhead.axis_maximum.x))}
  {% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
                        params.Y|float > toolhead.axis_maximum.y) %}
    {action_raise_error("Y[%.3f] must be between %.3f and %.3f."
                        | format(params.Y|float, toolhead.axis_minimum.y,
                                 toolhead.axis_maximum.y))}
  {% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
                        params.Z|float > toolhead.axis_maximum.z) %}
    {action_raise_error("Z[%.3f] must be between %.3f and %.3f."
                        | format(params.Z|float, toolhead.axis_minimum.z,
                                 toolhead.axis_maximum.z))}
  {% elif params.E and (params.E|float|abs > printer.configfile.settings[
                          "extruder"].max_extrude_only_distance) %}
    {action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
       | format(params.E|float|abs, printer.configfile.settings[
                                      "extruder"].max_extrude_only_distance))}
  {% endif %}

#####################################################################
# Axis
#####################################################################
#####################################################################
# Axis
#####################################################################
[gcode_macro _HOME_X]
gcode:
  #{% if 'x' not in printer.toolhead.homed_axes or printer['gcode_macro _SAFE_Z'].state == 'True'%}
    G28.6245197 X
    G91
    G0 X-10
    G90
  #{% endif %}

[gcode_macro _HOME_Y]
gcode:
 # {% if 'y' not in printer.toolhead.homed_axes or printer['gcode_macro _SAFE_Z'].state == 'True' %}
    G28.6245197 Y
    G91
    G0 Y-10
    G90
#  {% endif %}

[gcode_macro _HOME_Z]
gcode:
#  {% if 'z' not in printer.toolhead.homed_axes or printer['gcode_macro _SAFE_Z'].state == 'True' %}
    G0 X180 Y130 F8000
    G28.6245197 Z
    G0 Z6
 # {% endif %}

[force_move]
enable_force_move: True

[gcode_macro _SAFE_Z]
variable_state: 'False'
gcode:
  # {% set axes = printer.toolhead.homed_axes | default("") | string %}
  # {% if 'z' not in axes  %}
    SET_GCODE_VARIABLE MACRO=_SAFE_Z VARIABLE=state VALUE='"True"'
    SET_KINEMATIC_POSITION Z=0
    G0 Z10
    G90
  # {% endif %}

#####################################################################
# Macros
#####################################################################
[gcode_macro g28]
rename_existing: G28.6245197
gcode:
    {% if params.Z is not defined and params.Y is not defined and params.X is not defined %}
    _SAFE_Z
    _HOME_X
    _HOME_Y
    _HOME_Z
    SET_GCODE_VARIABLE MACRO=_SAFE_Z VARIABLE=state VALUE='"False"'

    G34
  {% elif params.Y is defined %}
    _HOME_Y
  {% elif params.X is defined %}
    _HOME_X
  {% elif params.Z is defined %}
    _HOME_Z
  {% endif %}

[gcode_macro G34]
variable_state: 'NULL'
gcode:
    {% if printer['gcode_macro G34'].state == 'NULL' %}
      Z_TILT_ADJUST 
      SET_GCODE_VARIABLE MACRO=G34 VARIABLE=state VALUE='"DONE"'
    {% endif %}